# -*- coding: utf-8 -*-
"""Maps2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18qmLAKIvkasiOr8AM7FIYFkc4tqBwSzN
"""

!pip install gmaps
!pip install ipywidgets
!pip install widgetsnbextension
!pip install googlemaps
!pip install reportlab

# Trip planner
import gmaps
import googlemaps
from googlemaps.maps import StaticMapMarker
from IPython.display import Image
from IPython.display import display
import google.generativeai as genai
import os
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from tabulate import tabulate
import time

API_KEY = ''
mapper = googlemaps.Client(key=API_KEY)
genai.configure(api_key="GOOGLE_API_KEY")
text_model = genai.GenerativeModel('gemini-1.5-pro')

# Params for static map
# maptype: roadmap, satellite, terrain, hybrid

def makeImage(path, map):
  f = open(path, 'wb')
  for chunk in map:
    if chunk:
      f.write(chunk)
  f.close()
  return Image(path)

def writeToFile(images):
    c = canvas.Canvas('output.pdf', pagesize=letter)
    page_width, page_height = letter

    for image in images:
        path = image.filename
        img_width, img_height = 600, 400

        x = (page_width - img_width) / 2
        y = (page_height - img_height) / 1.5

        text = path[0:path.index(".png")]
        text_width = c.stringWidth(text)
        c.drawString((page_width - text_width) / 2, page_height - 40, text)

        c.drawImage(path, x, y, width=img_width, height=img_height)

        # Add paragraph string below the image
        # para = str(table)
        # para_width = c.stringWidth(para)
        # para_x = (page_width - para_width) / 2
        # para_y = y - 20  # Adjust this value to position the paragraph as needed
        # c.drawString(para_x, para_y, para)

        c.showPage()

    c.save()

# From address
def show_city(destination):
  geocode_result = mapper.geocode(destination)
  lat = geocode_result[0]['geometry']['location']['lat']
  lng = geocode_result[0]['geometry']['location']['lng']
  coords = (lat, lng)
  map = mapper.static_map(center=coords, zoom=12, size=(600, 400))
  return map

def itenerary(att, destination):
  geocode_result = mapper.geocode(destination)
  lat = geocode_result[0]['geometry']['location']['lat']
  lng = geocode_result[0]['geometry']['location']['lng']
  places_result = mapper.places_nearby(location=(lat, lng), radius=1000, type=att)['results']

  markerList = []
  for loc in places_result:
    coords = (loc['geometry']['location']['lat'], loc['geometry']['location']['lng'])
    m1 = StaticMapMarker(locations=[(coords)], color="blue", label=att[0])
    markerList.append(m1)

  map = mapper.static_map(center=(lat, lng), zoom=14, size=(600, 400), markers=markerList)

  return map, places_result

def location_description(locations, base):
  data = []
  for i in range(6):
    base_locs = (base[0]['geometry']['location']['lat'], base[0]['geometry']['location']['lng'])
    locs = (locations[i+1]['geometry']['location']['lat'], locations[i+1]['geometry']['location']['lng'])
    distance = mapper.distance_matrix(base_locs, locs, mode="driving")['rows'][0]['elements'][0]['distance']['text']
    data.append((locations[i+1]['name'],locations[i+1]['vicinity'],distance))
  return data

destination = input("Where would you like to plan a trip to? ")
# destination = "New York"
# print("Generating a trip report")

restaurants, restaurant_locs = itenerary('Restaurant', destination)
musems, museum_locs = itenerary('Museum', destination)
hotels, hotel_locs = itenerary('Hotel', destination)

restaurant_image = makeImage('restaurants.png', restaurants)
museum_image = makeImage('museums.png', musems)
hotel_image = makeImage('hotels.png', hotels)


restaurant_info = location_description(restaurant_locs, mapper.geocode(destination))
musem_info = location_description(museum_locs, mapper.geocode(destination))
hotel_info = location_description(hotel_locs, mapper.geocode(destination))

rtable = tabulate(restaurant_info, headers='firstrow', tablefmt='fancy_grid')
mtable = tabulate(musem_info, headers='firstrow', tablefmt='fancy_grid')
htable = tabulate(hotel_info, headers='firstrow', tablefmt='fancy_grid')

print("\n\nNearby Restaurants\n\n")
display(restaurant_image)
print(rtable)
print("\nNearby Museums\n\n")
display(museum_image)
print(mtable)
print("\nNearby Hotels\n\n")
display(hotel_image)
print(htable)